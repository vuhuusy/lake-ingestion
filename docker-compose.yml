version: '3.6'

services:

  ####### MYSQL
  mysql:
    image: mysql:${MYSQL_VERSION}
    container_name: mysql
    ports:
      - "3307:3306"
    environment:
      MYSQL_ROOT_PASSWORD: 123456
      MYSQL_USER: huusy
      MYSQL_PASSWORD: 123456
    volumes:
      - mysql-data:/var/lib/mysql
    networks:
      - kafka-nifi

  ####### ZOOKEEPER
  zookeeper:
    image: confluentinc/cp-zookeeper:${CONFLUENT_VERSION}
    container_name: zookeeper    
    hostname: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    healthcheck:
      test: echo srvr | nc zookeeper 2181 || exit 1
      retries: 10
      interval: 10s
    restart: unless-stopped
    volumes:
      - zk-data:/var/lib/zookeeper/data
      - zk-txn-logs:/var/lib/zookeeper/log
    networks:
      - kafka-nifi

  ####### KAFKA
  kafka0:
    image: confluentinc/cp-kafka:${CONFLUENT_VERSION}
    container_name: kafka0
    hostname: kafka0
    ports:
      - "9092:9092"
    environment:
      KAFKA_ADVERTISED_LISTENERS: LISTENER_DOCKER_INTERNAL://kafka0:29092,LISTENER_DOCKER_EXTERNAL://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: LISTENER_DOCKER_INTERNAL:PLAINTEXT,LISTENER_DOCKER_EXTERNAL:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: 'LISTENER_DOCKER_INTERNAL'
      KAFKA_JMX_PORT: 9090
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_BROKER_ID: 1
      KAFKA_NUM_PARTITIONS: 2
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 100
      CONFLUENT_METRICS_ENABLE: 'false'
    healthcheck:
      test: nc -z kafka0 9092 || exit -1
      start_period: 15s
      interval: 5s
      timeout: 10s
      retries: 10
    restart: unless-stopped
    volumes:
      - kafka0-data:/var/lib/kafka/data
    networks:
      - kafka-nifi
    depends_on:
      zookeeper:
        condition: service_healthy

  kafka1:
    image: confluentinc/cp-kafka:${CONFLUENT_VERSION}
    container_name: kafka1
    hostname: kafka1
    ports:
      - "9091:9091"
    environment:
      KAFKA_ADVERTISED_LISTENERS: LISTENER_DOCKER_INTERNAL://kafka1:29091,LISTENER_DOCKER_EXTERNAL://localhost:9091
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: LISTENER_DOCKER_INTERNAL:PLAINTEXT,LISTENER_DOCKER_EXTERNAL:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: 'LISTENER_DOCKER_INTERNAL'
      KAFKA_JMX_PORT: 9090
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_BROKER_ID: 2
      KAFKA_NUM_PARTITIONS: 2
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 100
      CONFLUENT_METRICS_ENABLE: 'false'
    healthcheck:
      test: nc -z kafka1 9091 || exit -1
      start_period: 15s
      interval: 5s
      timeout: 10s
      retries: 10
    restart: unless-stopped
    volumes:
      - kafka1-data:/var/lib/kafka/data
    networks:
      - kafka-nifi
    depends_on:
      zookeeper:
        condition: service_healthy

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    ports:
      - "8080:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: vdt-kafka-cluster
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka0:29092,kafka1:29091
      KAFKA_CLUSTERS_0_METRICS_PORT: 9090
      DYNAMIC_CONFIG_ENABLED: 'true'
    healthcheck:
      test: nc -z kafka-ui 8080 || exit -1
      start_period: 15s
      interval: 5s
      timeout: 10s
      retries: 10
    restart: unless-stopped
    networks:
      - kafka-nifi
    depends_on:
      kafka0:
        condition: service_healthy
      kafka1:
        condition: service_healthy

  ####### NIFI
  nifi0:
    image: apache/nifi:${NIFI_VERSION}
    container_name: nifi0
    hostname: nifi0
    ports:
      - "6980:8080"
    environment:
      - NIFI_WEB_HTTP_PORT=8080
      - NIFI_CLUSTER_IS_NODE=true
      - NIFI_CLUSTER_NODE_PROTOCOL_PORT=8082
      - NIFI_ZK_CONNECT_STRING=zookeeper:2181
      - NIFI_ELECTION_MAX_WAIT=1 min
      - NIFI_SENSITIVE_PROPS_KEY=MySuperSecretKey
    restart: unless-stopped
    volumes:
      - nifi0-data:/opt/nifi/nifi-current/flowfile_repository
      - nifi0-data:/opt/nifi/nifi-current/content_repository
      - nifi0-data:/opt/nifi/nifi-current/database_repository
      - nifi0-data:/opt/nifi/nifi-current/provenance_repository
      - ./hadoop/core-site.xml:/opt/nifi/nifi-current/core-site.xml
      - ./hadoop/hdfs-site.xml:/opt/nifi/nifi-current/hdfs-site.xml
      - ./mysql-driver/mysql-connector-java-8.0.23.jar:/opt/nifi/nifi-current/drivers/mysql-8.3.0/mysql-connector-java-8.0.23.jar
    networks:
      - kafka-nifi
      - nifi-hadoop
    depends_on:
      - zookeeper

  nifi1:
    image: apache/nifi:${NIFI_VERSION}
    container_name: nifi1
    hostname: nifi1
    ports:
      - "6979:8080"
    environment:
      - NIFI_WEB_HTTP_PORT=8080
      - NIFI_CLUSTER_IS_NODE=true
      - NIFI_CLUSTER_NODE_PROTOCOL_PORT=8082
      - NIFI_ZK_CONNECT_STRING=zookeeper:2181
      - NIFI_ELECTION_MAX_WAIT=1 min
      - NIFI_SENSITIVE_PROPS_KEY=MySuperSecretKey
    restart: unless-stopped
    volumes:
      - nifi1-data:/opt/nifi/nifi-current/flowfile_repository
      - nifi1-data:/opt/nifi/nifi-current/content_repository
      - nifi1-data:/opt/nifi/nifi-current/database_repository
      - nifi1-data:/opt/nifi/nifi-current/provenance_repository
      - ./hadoop/core-site.xml:/opt/nifi/nifi-current/core-site.xml
      - ./hadoop/hdfs-site.xml:/opt/nifi/nifi-current/hdfs-site.xml
      - ./mysql-driver/mysql-connector-java-8.0.23.jar:/opt/nifi/nifi-current/drivers/mysql-8.3.0/mysql-connector-java-8.0.23.jar
    networks:
      - kafka-nifi
      - nifi-hadoop
    depends_on:
      - zookeeper

  ####### HADOOP    
  namenode:
    image: bde2020/hadoop-namenode:2.0.0-hadoop3.2.1-java8
    container_name: namenode
    ports:
      - "9870:9870"
      - "9000:9000"
    environment:
      - CLUSTER_NAME=data-flow
      - CORE_CONF_fs_defaultFS=hdfs://namenode:9000
    env_file:
      - ./hadoop/hadoop.env
    restart: unless-stopped
    volumes:
      - hadoop_namenode:/hadoop/dfs/name
      - hadoop_home:/home
    networks:
      - nifi-hadoop

  datanode1:
    image: bde2020/hadoop-datanode:2.0.0-hadoop3.2.1-java8
    container_name: datanode1
    environment:
      SERVICE_PRECONDITION: "namenode:9870"
      CORE_CONF_fs_defaultFS: "hdfs://namenode:9000"
    env_file:
      - ./hadoop/hadoop.env
    restart: unless-stopped
    volumes:
      - hadoop_datanode1:/hadoop/dfs/data
    networks:
      - nifi-hadoop

  datanode2:
    image: bde2020/hadoop-datanode:2.0.0-hadoop3.2.1-java8
    container_name: datanode2
    environment:
      SERVICE_PRECONDITION: "namenode:9870"
      CORE_CONF_fs_defaultFS: "hdfs://namenode:9000"
    env_file:
      - ./hadoop/hadoop.env
    restart: unless-stopped
    volumes:
      - hadoop_datanode2:/hadoop/dfs/data
    networks:
      - nifi-hadoop
  
  resourcemanager:
    image: bde2020/hadoop-resourcemanager:2.0.0-hadoop3.2.1-java8
    container_name: resourcemanager
    ports:
      - "8088:8088"
    environment:
      SERVICE_PRECONDITION: "namenode:9000 namenode:9870 datanode1:9864 datanode2:9864"
    env_file:
      - ./hadoop/hadoop.env
    restart: unless-stopped
    networks:
      - nifi-hadoop

  nodemanager1:
    image: bde2020/hadoop-nodemanager:2.0.0-hadoop3.2.1-java8
    container_name: nodemanager
    environment:
      SERVICE_PRECONDITION: "namenode:9000 namenode:9870 datanode1:9864 datanode2:9864 resourcemanager:8088"
    env_file:
      - ./hadoop/hadoop.env
    restart: unless-stopped
    networks:
      - nifi-hadoop
  
  historyserver:
    image: bde2020/hadoop-historyserver:2.0.0-hadoop3.2.1-java8
    container_name: historyserver
    environment:
      SERVICE_PRECONDITION: "namenode:9000 namenode:9870 datanode1:9864 datanode2:9864 resourcemanager:8088"
    env_file:
      - ./hadoop/hadoop.env
    restart: unless-stopped
    volumes:
      - hadoop_historyserver:/hadoop/yarn/timeline
    networks:
      - nifi-hadoop


volumes:
  mysql-data:
  zk-data:
  zk-txn-logs:
  kafka0-data:
  kafka1-data:
  nifi0-data:
  nifi1-data:
  hadoop_namenode:
  hadoop_home:
  hadoop_datanode1:
  hadoop_datanode2:
  hadoop_historyserver:

networks:
  kafka-nifi:
    driver: bridge
  nifi-hadoop:
    driver: bridge